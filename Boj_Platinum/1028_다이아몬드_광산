# 1028 - 다이아몬드 광산 (Platinum 5)
import sys
R,C = map(int,sys.stdin.readline().split())
mine = [sys.stdin.readline() for _ in range(R)]
ans = 0

def diamond_top(x,y,direction,length):
  if i+2*length > R-1 or y < 0 or y > C-1 or mine[x][y] == '0':
    return length
  if direction == 0:
    return diamond_top(x+1,y+1,0,length+1)
  else:
    return diamond_top(x+1,y-1,1,length+1)

def diamond_bottom(x,y,direction,length):
  if mine[x][y] == '0':
    return -1
  if length == L-1:
    return length
  if direction == 0:
    return diamond_bottom(x+1,y+1,0,length+1)
  else:
    return diamond_bottom(x+1,y-1,1,length+1)

# size = n인 다이아몬드는 [i,j]로부터 양옆으로 n-1칸, 아래로 2*n칸의 직사각형 공간을 필요로 함.
for i in range(R):
  if R-1-i < 2*ans:
    # i~R-1까지 거리 = R-1-i가 2*ans보다 작으면 볼 필요 없음.
    continue
  for j in range(C):
    if j<ans-1 or C-1-j<ans:
      # 0~j까지의 거리 = j 혹은 j~C-1까지의 거리 = C-1-j가 ans-1보다 작으면 볼 필요 없음.
      continue
    else:
      if mine[i][j] == '1':
        # 값이 1이면 대각선 아래 오른쪽 방향으로 최대 길이를 수색함.
        length_top_right = diamond_top(i,j,0,0)
        if length_top_right > ans:
          # 위의 길이가 ans보다 길면 아래 왼쪽 방향도 수색함.
          length_top_left = diamond_top(i,j,1,0)
          max_length = min(length_top_right, length_top_left)
          if max_length > ans:
            # 그것도 ans보다 길면 둘 중 작은 값을 max_length라고 정의. 1이면 ans = 1
            if max_length == 1:
              ans = 1
            # max_length 기준으로, 둘이 합쳐지는 방향으로 대각선 아래를 또 같은 방식으로 수색함.
            # 해당 값을 ans+1까지 1씩 줄여가며 탐색. 성공하면 ans를 갱신하고 break
            else:
              for a in range(0,max_length-ans):
                L = max_length-a
                length_bottom_right = diamond_bottom(i+L,j+L-2,1,1) +1
                if length_bottom_right > ans:
                  length_bottom_left = diamond_bottom(i+L,j-L+2,0,1) + 1
                  effective_length = min(length_bottom_right, length_bottom_left)
                  if effective_length > ans:
                    ans = effective_length
                    break

print(ans)
